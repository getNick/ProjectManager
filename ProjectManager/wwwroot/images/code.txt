public static double CalculateRating(double size,double value, double boundValue)
        {

            double rating = ((Math.Abs(size - value)) / Math.Abs(boundValue - value));
            if (rating > 1)
            {
                return 0;
            }
            return (1.0 - Math.Pow(rating, 2.0)) * 10;
        }
        public static double CalculateRatingWithDesired(double dress, double human, double desired)
        {
            double rating = Math.Abs(dress - desired)/ Math.Abs(human - desired);
            if (rating > 1)
            {
                return 0;
            }
            return (1.0 - Math.Pow(rating,2.0)) * 10;
        }

        public static ProductVariation CalculateRating(ProductVariation pv, UserSizes user, SizeStyle? sizeStyle)
        {
            foreach (var sizeVariation in pv.SizeVariation)
            {
                double arrange = 0;
                foreach (var size in sizeVariation.ListParams)
                {
                    switch (size.TypeSize)
                    {
                        case SizesEnum.Breast:
                            {
                                switch (sizeStyle)
                                {
                                    case SizeStyle.Slinky:
                                        {
                                            if (user.Breast < size.Value)
                                            {

                                                size.Rating = SizeResponseController.CalculateRatingWithDesired(
                                                    (double)size.Value,
                                                    (double)user.Breast, (double)size.Value);
                                            }
                                            else
                                            {
                                                size.Rating = SizeResponseController.CalculateRating((double)user.Breast,
                                                    (double)size.Value, (double)size.MaxValue);
                                            }

                                        }
                                        break;
                                    case SizeStyle.LittleMore:
                                        {
                                            size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                (double)user.Breast, (double)size.Value * user.LittleMoreSizeProcent);
                                        }
                                        break;
                                    case SizeStyle.OverSize:
                                        {
                                            size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                (double)user.Breast, (double)size.Value * user.LittleMoreSizeProcent);
                                        }
                                        break;
                                }

                                size.UserSize = (double)user.Breast;
                                size.SizeResponse = SizeResponseController.GetResponse(size.Rating);
                            }
                            break;
                        case SizesEnum.Waist:
                            {
                                switch (sizeStyle)
                                {
                                    case SizeStyle.Slinky:
                                        {
                                            if (user.Waist < size.Value)
                                            {

                                                size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                    (double)user.Waist, (double)size.Value);
                                            }
                                            else
                                            {
                                                size.Rating = SizeResponseController.CalculateRating((double)user.Waist,
                                                    (double)size.Value, (double)size.MaxValue);
                                            }

                                        }
                                        break;
                                    case SizeStyle.LittleMore:
                                        {
                                            size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                (double)user.Waist, (double)size.Value * user.LittleMoreSizeProcent);
                                        }
                                        break;
                                    case SizeStyle.OverSize:
                                        {
                                            size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                (double)user.Waist, (double)size.Value * user.LittleMoreSizeProcent);
                                        }
                                        break;
                                }
                                size.UserSize = (double)user.Waist;
                                size.SizeResponse = SizeResponseController.GetResponse(size.Rating);
                            }
                            break;

                        case SizesEnum.Hips:
                            {
                                switch (sizeStyle)
                                {
                                    case SizeStyle.Slinky:
                                        {
                                            if (user.Thigh < size.Value)
                                            {

                                                size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                    (double)user.Thigh, (double)size.Value);
                                            }
                                            else
                                            {
                                                size.Rating = SizeResponseController.CalculateRating((double)user.Thigh,
                                                    (double)size.Value, (double)size.MaxValue);
                                            }

                                        }
                                        break;
                                    case SizeStyle.LittleMore:
                                        {
                                            size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                (double)user.Thigh, (double)size.Value * user.LittleMoreSizeProcent);
                                        }
                                        break;
                                    case SizeStyle.OverSize:
                                        {
                                            size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                (double)user.Thigh, (double)size.Value * user.LittleMoreSizeProcent);
                                        }
                                        break;
                                }
                                size.UserSize = (double)user.Thigh;
                                size.SizeResponse = SizeResponseController.GetResponse(size.Rating);
                            }
                            break;
                        case SizesEnum.WidthOfTheShoulders:
                            {
                                switch (sizeStyle)
                                {
                                    case SizeStyle.Slinky:
                                        {
                                            if (user.ShouldersWidth < size.Value)
                                            {

                                                size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                    (double)user.ShouldersWidth, (double)size.Value);
                                            }
                                            else
                                            {
                                                size.Rating = SizeResponseController.CalculateRating((double)user.ShouldersWidth,
                                                    (double)size.Value, (double)size.MaxValue);
                                            }

                                        }
                                        break;
                                    case SizeStyle.LittleMore:
                                        {
                                            size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                (double)user.ShouldersWidth, (double)size.Value * user.LittleMoreSizeProcent);
                                        }
                                        break;
                                    case SizeStyle.OverSize:
                                        {
                                            size.Rating = SizeResponseController.CalculateRatingWithDesired((double)size.Value,
                                                (double)user.ShouldersWidth, (double)size.Value * user.LittleMoreSizeProcent);
                                        }
                                        break;
                                }
                                size.UserSize = (double)user.ShouldersWidth;
                                size.SizeResponse = SizeResponseController.GetResponse(size.Rating);
                            }
                            break;
                    }
                    arrange += size.Rating;
                }

                arrange /= 4.0;
                sizeVariation.Rating = arrange;
                sizeVariation.SizeResponse = SizeResponseController.GetResponse(arrange);
            }

            return pv;
        }