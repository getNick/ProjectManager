@using ProjectManager.Models.ConstAndEnums
@model ProjectManager.Models.DashboardViewModels.PersonalDashboard
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="dx-fieldset col-lg-6" align="center">
        <div class="dx-field">
            <div class="dx-field-label">Select the data source </div>
            <div class="dx-field-value">
                @(Html.DevExtreme().DropDownBox()
                      .Value(Model.SelectorValue)
                      .ValueExpr("ID")
                      .DisplayExpr("Text")
                      .DropDownOptions(o => o.Height(350))
                      .DataSource(Model.SelectorData)
                      .Placeholder("Select a value...")
                      .ShowClearButton(true)
                      .OnValueChanged("treeBox_valueChanged")
                      .ContentTemplate(new TemplateName("EmbeddedTreeViewSingle"))
                      )
                <div id="treeBox"></div>
            </div>
        </div>
    </div>
    <p id="selector" hidden>@Model.SelectorValue</p>

    @using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewSingle"))
    {
        @(Html.DevExtreme().TreeView()
              .DataSource(new JS(@"component.option(""dataSource"")"))
              .KeyExpr("ID")
              .DisplayExpr("Text")
              .ItemsExpr("Items")
              .ExpandedExpr("Expanded")
              .ParentIdExpr("CategoryId")
              .DataStructure(TreeViewDataStructure.Plain)
              .SelectionMode(NavSelectionMode.Single)
              .SelectByClick(true)
              .Height(235)
              .OnItemSelectionChanged(@<text>
                                          function(args) {
                                          var value = args.component.getSelectedNodesKeys();
                                          component.option("value", value);
                                          }
                                       </text>)
              .OnContentReady(@<text>
                                  function(args) {
                                  syncTreeViewSelection(args.component, component.option("value"));
                                  }
                               </text>)
              )
    }
</div>
<div class="row">

    <div class="col-lg-2 col-lg-offset-1" style="padding-left: 3px; padding-right: 3px;">
        <div class="panel panel-default">
            <div class="panel-heading">@TaskStatusEnum.Backlog.GetDisplayName()</div>
            <div class="panel-body">
                @{
                    if (Model.Backlog != null)
                    {
                        foreach (var task in Model.Backlog)
                        {
                            @await Html.PartialAsync("_TaskTemplateWithoutUser", task)
                        }
                    }
                }
            </div>
        </div>
    </div>
    <div class="col-lg-2" style="padding-left: 3px; padding-right: 3px;">
        <div class="panel panel-default">
            <div class="panel-heading">@TaskStatusEnum.ToDo.GetDisplayName()</div>
            <div class="panel-body">
                @{
                    if (Model.ToDo != null)
                    {
                        foreach (var task in Model.ToDo)
                        {
                            @await Html.PartialAsync("_TaskTemplateWithoutUser", task)
                        }
                    }
                }
            </div>
        </div>
    </div>
    <div class="col-lg-2" style="padding-left: 3px; padding-right: 3px;">
        <div class="panel panel-default">
            <div class="panel-heading">@TaskStatusEnum.InProgress.GetDisplayName()</div>
            <div class="panel-body">
                @{
                    if (Model.InProgress != null)
                    {
                        foreach (var task in Model.InProgress)
                        {
                            @await Html.PartialAsync("_TaskTemplateWithoutUser", task)
                        }
                    }
                }
            </div>
        </div>
    </div>
    <div class="col-lg-2" style="padding-left: 3px; padding-right: 3px;">
        <div class="panel panel-default">
            <div class="panel-heading">@TaskStatusEnum.Testing.GetDisplayName()</div>
            <div class="panel-body">
                @{
                    if (Model.Testing != null)
                    {
                        foreach (var task in Model.Testing)
                        {
                            @await Html.PartialAsync("_TaskTemplateWithoutUser", task)
                        }
                    }
                }
            </div>
        </div>
    </div>
    <div class="col-lg-2" style="padding-left: 3px; padding-right: 3px;">
        <div class="panel panel-default">
            <div class="panel-heading">@TaskStatusEnum.Done.GetDisplayName()</div>
            <div class="panel-body">
                @{
                    if (Model.Done != null)
                    {
                        foreach (var task in Model.Done)
                        {
                            @await Html.PartialAsync("_TaskTemplateWithoutUser", task)
                        }
                    }
                }
            </div>
        </div>
    </div>

</div>

<script>
    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
            var s = document.getElementById("selector");
            if (s.innerHTML != value) {
                location.href = "/Dashboard/Index?selector=" + value;
            }
        
        }
    }

    function treeBox_valueChanged(e) {
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }
</script>