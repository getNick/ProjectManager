
@{
    ViewData["Title"] = "CreateCustomerWish";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>CreateCustomerWish</h2>
<form asp-controller="Task" asp-action="AddCustomerWish" method="post" enctype="multipart/form-data">
    <div class="row">
        <div class="col-lg-6 ">
            <label for="usr">Name:</label>
            <input type="text" name="name" class="form-control" id="usr">
            <div class="form-group">
                <label for="usr">Description:</label>
                <textarea class="form-control" rows="5" name="description"></textarea>
            </div>
        </div>
        <div class="col-lg-6 ">
            <label for="file-uploader">Additional files:</label>
            @(Html.DevExtreme().FileUploader()
                  .ID("file-uploader")
                  .Name("files")
                  .Multiple(true)
                  .Accept("*")
                  .UploadMode(FileUploadMode.UseForm)
                  .OnValueChanged("fileUploader_valueChanged")
                  )
            <div class="form-group">
                <label for="selected-date">Project deadline:</label>
                @(Html.DevExtreme().DateBox().Name("deadline")
                      .ID("selected-date")
                      .Value(DateTime.Now)
                      .Width("100%")
                      .OnValueChanged("selectedDate_changed").Min(DateTime.Now))
            </div>
        </div>


    </div>
    <div class="row">
        <div align="right">
            <input type="submit" class="btn btn-primary btn-lg" value="Create"/>
        </div>
    </div>
</form>
<script>
    var date = new Date().getTime();

    function getCalendarInstance() {
        return $("#calendar-container").dxCalendar("instance");
    }

    function isWeekend(date) {
        var day = date.getDay();

        return day === 0 || day === 6;
    }

    function getCellTemplate(data) {
        var cssClass = "";

        if (isWeekend(data.date))
            cssClass = "weekend";

        $.each([[1, 0], [4, 6], [25, 11]], function (_, item) {
            if (data.date.getDate() === item[0] && data.date.getMonth() === item[1]) {
                cssClass = "holyday";
                return false;
            }
        });

        return "<span class='" + cssClass + "'>" + data.text + "</span>";
    }

    function calendar_valueChanged(data) {
        $("#selected-date").dxDateBox("instance").option("value", data.value);
    }

    function minValue_changed(data) {
        var calendar = getCalendarInstance();
        if (data.value) {
            calendar.option("min", new Date(date - 1000 * 60 * 60 * 24 * 3));
        } else {
            calendar.option("min", undefined);
        }
    }

    function maxValue_changed(data) {
        var calendar = getCalendarInstance();
        if (data.value) {
            calendar.option("max", new Date(date + 1000 * 60 * 60 * 24 * 3));
        } else {
            calendar.option("max", undefined);
        }
    }

    function disabledDates_changed(data) {
        var calendar = getCalendarInstance();
        if (data.value) {
            calendar.option("disabledDates", function (data) {
                return data.view === "month" && isWeekend(data.date);
            });
        } else {
            calendar.option("disabledDates", undefined);
        }
    }

    function firstDayOfWeek_changed(data) {
        var calendar = getCalendarInstance();
        if (data.value) {
            calendar.option("firstDayOfWeek", 1);
        } else {
            calendar.option("firstDayOfWeek", 0);
        }
    }

    function useCustomTemplate(data) {
        getCalendarInstance().option("cellTemplate", data.value ? getCellTemplate : "cell");
    }

    function disabledState_changed(data) {
        getCalendarInstance().option("disabled", data.value);
    }

    function zoomLevel_changed(data) {
        getCalendarInstance().option("zoomLevel", data.value);
    }

    function selectedDate_changed(data) {
        getCalendarInstance().option("value", data.value);
    }
    function getFileUploaderInstance() {
        return $("#file-uploader").dxFileUploader("instance");
    }

    function fileUploader_valueChanged(e) {
        var files = e.value;
        if (files.length > 0) {
            $("#selected-files .selected-item").remove();

            $.each(files, function (i, file) {
                var $selectedItem = $("<div />").addClass("selected-item");
                $selectedItem.append(
                    $("<span />").html("Name: " + file.name + "<br/>"),
                );
                $selectedItem.appendTo($("#selected-files"));
            });
            $("#selected-files").show();
        }
        else
            $("#selected-files").hide();
    }

    function acceptOption_changed(e) {
        getFileUploaderInstance().option("accept", e.value);
    }

    function uploadMode_changed(e) {
        getFileUploaderInstance().option("uploadMode", e.value);
    }

    function multipleOption_changed(e) {
        getFileUploaderInstance().option("multiple", e.value);
    }
    tinymce.init({
        selector: 'textarea',
        height: 300,
        menubar: false,
        plugins: [
            'advlist autolink lists link image charmap print preview anchor textcolor',
            'searchreplace visualblocks code fullscreen',
            'insertdatetime media table contextmenu paste code'
        ],
        toolbar: ' | undo redo |  formatselect | bold italic forecolor backcolor | link  | bullist numlist |  insert',
        content_css: [
            '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
            '//www.tinymce.com/css/codepen.min.css']
    });
</script>