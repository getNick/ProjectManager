@model ProjectManager.Models.DashboardViewModels.TaskPageViewModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    @if (Model.MyOpenTask != null)
    {
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">@Html.DisplayNameFor(model => model.MyOpenTask)</div>
                <div class="panel-body">
                    @{

                        foreach (var task in Model.MyOpenTask)
                        {
                            @await Html.PartialAsync("_TaskTemplate", task)
                        }
                    }

                </div>
            </div>

        </div>
    }
    @if (Model.AllMyClosedTasks != null)
    {
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">@Html.DisplayNameFor(model => model.AllMyClosedTasks)</div>
                <div class="panel-body">
                    @{

                        foreach (var task in Model.AllMyClosedTasks)
                        {
                            @await Html.PartialAsync("_TaskTemplate", task)
                        }

                    }
                </div>
            </div>
        </div>
    }
    @if (Model.CanCreateTask)
    {

        <input type="button" class="btn btn-primary btn-lg" value="Create new task" onclick="location.href = '@Url.Action("Create", "Task")'" />
        
    }
    @if (Model.iCusomer)
    {
    <input type="button" class="btn btn-primary btn-lg" value="Create new customer wish" onclick="location.href = '@Url.Action("AddCustomerWish", "Task")'" />
    }
</div>
<div class="row">
    <div class="dx-fieldset col-lg-6">
        <div class="dx-field">
            <div class="dx-field-label">Select the data source </div>
            <div class="dx-field-value">
                @(Html.DevExtreme().DropDownBox()
                                              .Value(Model.SelectorValue)
                                              .ValueExpr("ID")
                                              .DisplayExpr("Text")
                                              .DropDownOptions(o => o.Height(350))
                                              .DataSource(Model.SelectorData)
                                              .Placeholder("Select a value...")
                                              .ShowClearButton(true)
                                              .OnValueChanged("treeBox_valueChanged")
                                              .ContentTemplate(new TemplateName("EmbeddedTreeViewSingle"))
                )
                <div id="treeBox"></div>
            </div>
        </div>
    </div>
    <p id="selector" hidden>@Model.SelectorValue</p>
</div>
@using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewSingle"))
{
    @(Html.DevExtreme().TreeView()
                  .DataSource(new JS(@"component.option(""dataSource"")"))
                  .KeyExpr("ID")
                  .DisplayExpr("Text")
                  .ItemsExpr("Items")
                  .ExpandedExpr("Expanded")
                  .ParentIdExpr("CategoryId")
                  .DataStructure(TreeViewDataStructure.Plain)
                  .SelectionMode(NavSelectionMode.Single)
                  .SelectByClick(true)
                  .Height(235)
                  .OnItemSelectionChanged(@<text>
                function(args) {
                var value = args.component.getSelectedNodesKeys();
                component.option("value", value);
                }
                </text>)
                          .OnContentReady(@<text>
                        function(args) {
                        syncTreeViewSelection(args.component, component.option("value"));
                        }
                        </text>)
    )
}
<script>
    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
            var s = document.getElementById("selector");
            if (s.innerHTML != value) {
                location.href = "/Task/Index?selector=" + value;
            }

        }
    }

    function treeBox_valueChanged(e) {
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }
</script>

<div class="row">
    <div class="col-lg-6">
        <div class="panel panel-default">
            <div class="panel-heading">@Html.DisplayNameFor(model => model.CustomList)</div>
            <div class="panel-body">
                @{
                    if (Model.CustomList != null)
                    {
                        foreach (var task in Model.CustomList)
                        {
                            @await Html.PartialAsync("_TaskTemplate", task)
                        }
                    }
                }
            </div>
        </div>
    </div>
    @if (Model.CustomerWishes != null)
    {
        <div class="col-lg-6">
            <div class="panel panel-default">
                <div class="panel-heading">@Html.DisplayNameFor(model => model.CustomerWishes)</div>
                <div class="panel-body">
                    @{
                        if (Model.CustomerWishes != null)
                        {
                            <table class="table table-striped" style="width: 100%;">
                                @foreach (var task in Model.CustomerWishes)
                                {
                                    <tr>
                                        <td>@task.Autor.User.FullName</td>
                                        <td>@task.Name</td>
                                        <td>@task.Deadline.ToString()</td>
                                    </tr>
                                }
                            </table>
                        }
                    }
                </div>
            </div>
        </div>
    }
</div>

