@using ProjectManager.Models.ConstAndEnums
@model ProjectManager.Models.DashboardViewModels.CreateNewTaskViewModel
@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<form asp-controller="Task" asp-action="SaveNewTask" method="post" enctype="multipart/form-data">
    <h2>New task</h2>
    <div class="row">
        <div class="col-lg-4">
            <div class="form-group">
                <label>Department:</label>
                @if (Model.AllDepartments != null)
                {
                    <select class="form-control" id="sel1" name="departmentId" onchange="if (this.value) window.location.href = this.value">
                        @foreach (var dep in Model.AllDepartments)
                        {
                            if ((Model.SelectedDepartment != null) && (dep.Id == Model.SelectedDepartment.Id))
                            {
                                <option value="@dep.Id" selected>@dep.Name</option>
                            }
                            else
                            {
                                <option value="@Url.Action("Create", "Task", new {selectedDepartmentId = dep.Id})">@dep.Name</option>
                            }
                        }
                    </select>
                }
            </div>
        </div>
        <div class="col-lg-4">
            <div class="form-group">
                <label>Team:</label>
                @if (Model.AllTeams != null)
                {
                    <select name="teamId" class="form-control" onchange="if (this.value) window.location.href = this.value">
                        @foreach (var team in Model.AllTeams)
                        {
                            if ((Model.SelectedTeam != null) && (team.Id == Model.SelectedTeam.Id))
                            {
                                <option value="@team.Id" selected>@team.Name</option>
                            }
                            else
                            {
                                <option value="@Url.Action("Create", "Task", new {selectedDepartmentId = Model.SelectedDepartment.Id, selectedTeamId = team.Id})">@team.Name</option>
                            }
                        }
                    </select>
                }
            </div>

        </div>
        <div class="col-lg-4">
            <div class="form-group">
                <label>Assigne:</label>
                @if (Model.SelectedTeam != null)
                {
                    <select name="assigneId" class="form-control" onchange="if (this.value) window.location.href = this.value">
                        @foreach (var participant in Model.SelectedTeam.Participants)
                        {
                            <option value="@participant.Id">@participant.User.UserName</option>
                        }
                    </select>
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 ">
            <div class="form-group">
                <label for="usr">Description:</label>
                <textarea class="form-control" rows="5" name="description"></textarea>
            </div>
            <label for="file-uploader">Additional files:</label>
            @(Html.DevExtreme().FileUploader()
                  .ID("file-uploader")
                  .Name("files")
                  .Multiple(true)
                  .Accept("*")
                  .UploadMode(FileUploadMode.UseForm)
                  .OnValueChanged("fileUploader_valueChanged")
                  )
        </div>
        <div class="form-group col-lg-6">
            <label for="usr">Name:</label>
            <input type="text" name="name" class="form-control" id="usr">
            <div class="form-group">
                <label>Priority:</label>
                <select name="priority" class="form-control">
                    <option value="@PriorityEnum.Lowest">@PriorityEnum.Lowest</option>
                    <option value="@PriorityEnum.Low">@PriorityEnum.Low</option>
                    <option value="@PriorityEnum.Medium">@PriorityEnum.Medium</option>
                    <option value="@PriorityEnum.High">@PriorityEnum.High</option>
                    <option value="@PriorityEnum.Highest">@PriorityEnum.Highest</option>
                </select>
            </div>
            <div class="form-group">
                <label>Task type:</label>
                <select name="taskType" class="form-control">
                    <option value="@TaskTypeEnum.Task">@TaskTypeEnum.Task</option>
                    <option value="@TaskTypeEnum.Bug">@TaskTypeEnum.Bug</option>
                    <option value="@TaskTypeEnum.Investigation">@TaskTypeEnum.Investigation</option>
                    <option value="@TaskTypeEnum.Testing">@TaskTypeEnum.Testing</option>
                </select>
            </div>
            <div class="form-group">
                <label for="selected-date">Project deadline:</label>
                @(Html.DevExtreme().DateBox().Name("deadline")
                      .ID("selected-date")
                      .Value(DateTime.Now)
                      .Width("100%")
                      .OnValueChanged("selectedDate_changed").Min(DateTime.Now))
            </div>
        </div>
    </div>
    <div class="row">
        <div align="right">
            <input type="submit" class="btn btn-dark btn-lg" value="Create"/>
        </div>
    </div>
</form>
<script>
    var date = new Date().getTime();

    function getCalendarInstance() {
        return $("#calendar-container").dxCalendar("instance");
    }

    function isWeekend(date) {
        var day = date.getDay();

        return day === 0 || day === 6;
    }

    function getCellTemplate(data) {
        var cssClass = "";

        if (isWeekend(data.date))
            cssClass = "weekend";

        $.each([[1, 0], [4, 6], [25, 11]], function (_, item) {
            if (data.date.getDate() === item[0] && data.date.getMonth() === item[1]) {
                cssClass = "holyday";
                return false;
            }
        });

        return "<span class='" + cssClass + "'>" + data.text + "</span>";
    }

    function calendar_valueChanged(data) {
        $("#selected-date").dxDateBox("instance").option("value", data.value);
    }

    function minValue_changed(data) {
        var calendar = getCalendarInstance();
        if (data.value) {
            calendar.option("min", new Date(date - 1000 * 60 * 60 * 24 * 3));
        } else {
            calendar.option("min", undefined);
        }
    }

    function maxValue_changed(data) {
        var calendar = getCalendarInstance();
        if (data.value) {
            calendar.option("max", new Date(date + 1000 * 60 * 60 * 24 * 3));
        } else {
            calendar.option("max", undefined);
        }
    }

    function disabledDates_changed(data) {
        var calendar = getCalendarInstance();
        if (data.value) {
            calendar.option("disabledDates", function (data) {
                return data.view === "month" && isWeekend(data.date);
            });
        } else {
            calendar.option("disabledDates", undefined);
        }
    }

    function firstDayOfWeek_changed(data) {
        var calendar = getCalendarInstance();
        if (data.value) {
            calendar.option("firstDayOfWeek", 1);
        } else {
            calendar.option("firstDayOfWeek", 0);
        }
    }

    function useCustomTemplate(data) {
        getCalendarInstance().option("cellTemplate", data.value ? getCellTemplate : "cell");
    }

    function disabledState_changed(data) {
        getCalendarInstance().option("disabled", data.value);
    }

    function zoomLevel_changed(data) {
        getCalendarInstance().option("zoomLevel", data.value);
    }

    function selectedDate_changed(data) {
        getCalendarInstance().option("value", data.value);
    }
    function getFileUploaderInstance() {
        return $("#file-uploader").dxFileUploader("instance");
    }

    function fileUploader_valueChanged(e) {
        var files = e.value;
        if (files.length > 0) {
            $("#selected-files .selected-item").remove();

            $.each(files, function (i, file) {
                var $selectedItem = $("<div />").addClass("selected-item");
                $selectedItem.append(
                    $("<span />").html("Name: " + file.name + "<br/>"),
                );
                $selectedItem.appendTo($("#selected-files"));
            });
            $("#selected-files").show();
        }
        else
            $("#selected-files").hide();
    }

    function acceptOption_changed(e) {
        getFileUploaderInstance().option("accept", e.value);
    }

    function uploadMode_changed(e) {
        getFileUploaderInstance().option("uploadMode", e.value);
    }

    function multipleOption_changed(e) {
        getFileUploaderInstance().option("multiple", e.value);
    }
    tinymce.init({
        selector: 'textarea',
        height: 300,
        menubar: false,
        plugins: [
            'advlist autolink lists link image charmap print preview anchor textcolor',
            'searchreplace visualblocks code fullscreen',
            'insertdatetime media table contextmenu paste code'
        ],
        toolbar: ' | undo redo |  formatselect | bold italic forecolor backcolor | link  | bullist numlist |  insert',
        content_css: [
            '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
            '//www.tinymce.com/css/codepen.min.css']
    });
</script>
